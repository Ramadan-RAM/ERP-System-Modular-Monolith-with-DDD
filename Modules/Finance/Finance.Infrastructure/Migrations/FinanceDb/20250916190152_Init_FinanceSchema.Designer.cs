// <auto-generated />
using System;
using Finance.Infrastructure.Persistence.DBContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Finance.Infrastructure.Migrations.FinanceDb
{
    [DbContext(typeof(FinanceDbContext))]
    [Migration("20250916190152_Init_FinanceSchema")]
    partial class Init_FinanceSchema
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.19")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Finance.Domain.Entities.CostCenter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("CostCenters");
                });

            modelBuilder.Entity("Finance.Domain.Entities.Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsBase")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("Finance.Domain.Entities.DepartmentCostLink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CostCenterId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("EmployeeCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("EmployeeName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("GLAccountId")
                        .HasColumnType("int");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("NetSalary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CostCenterId");

                    b.HasIndex("GLAccountId");

                    b.HasIndex("DepartmentId", "EmployeeCode");

                    b.ToTable("DepartmentCostLinks");
                });

            modelBuilder.Entity("Finance.Domain.Entities.ExchangeRate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("FromCurrency")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<decimal>("Rate")
                        .HasColumnType("decimal(18,6)");

                    b.Property<DateTime>("RateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ToCurrency")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ExchangeRates");
                });

            modelBuilder.Entity("Finance.Domain.Entities.FinancialYear", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsClosed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Year")
                        .IsUnique();

                    b.ToTable("FinancialYears", (string)null);
                });

            modelBuilder.Entity("Finance.Domain.Entities.GLAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BalanceSide")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("ParentAccountId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ParentAccountId");

                    b.ToTable("GLAccounts");
                });

            modelBuilder.Entity("Finance.Domain.Entities.GeneralExpense", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("CostCenterId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DepartmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpenseDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CostCenterId");

                    b.ToTable("GeneralExpenses");
                });

            modelBuilder.Entity("Finance.Domain.Entities.InventoryItemSnapshot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AsOf")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("AvgSellingPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("ForecastStatus")
                        .HasColumnType("int");

                    b.Property<int>("ItemType")
                        .HasColumnType("int");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("QuantityAvailable")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SKU")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("InventorySnapshots");
                });

            modelBuilder.Entity("Finance.Domain.Entities.JournalEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("JournalEntries");
                });

            modelBuilder.Entity("Finance.Domain.Entities.JournalLine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CostCenterId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ExternalReference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GLAccountId")
                        .HasColumnType("int");

                    b.Property<int>("JournalEntryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CostCenterId");

                    b.HasIndex("GLAccountId");

                    b.HasIndex("JournalEntryId");

                    b.ToTable("JournalLines");
                });

            modelBuilder.Entity("Finance.Domain.Entities.ProcessedEventLog", b =>
                {
                    b.Property<Guid>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("HandlerName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("ProcessedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("EventId");

                    b.ToTable("ProcessedEventLogs", (string)null);
                });

            modelBuilder.Entity("Finance.Domain.Entities.ProfitLossForecast", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ProfitLossForecasts");
                });

            modelBuilder.Entity("Finance.Domain.Entities.PurchaseItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("ItemType")
                        .HasColumnType("int");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PurchaseOrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PurchaseOrderId");

                    b.ToTable("PurchaseItems");
                });

            modelBuilder.Entity("Finance.Domain.Entities.PurchaseOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("SupplierId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("PurchaseOrders");
                });

            modelBuilder.Entity("Finance.Domain.Entities.DepartmentCostLink", b =>
                {
                    b.HasOne("Finance.Domain.Entities.CostCenter", "CostCenter")
                        .WithMany()
                        .HasForeignKey("CostCenterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Finance.Domain.Entities.GLAccount", null)
                        .WithMany()
                        .HasForeignKey("GLAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CostCenter");
                });

            modelBuilder.Entity("Finance.Domain.Entities.FinancialYear", b =>
                {
                    b.OwnsOne("Finance.Domain.ValueObjects.Period", "Period", b1 =>
                        {
                            b1.Property<int>("FinancialYearId")
                                .HasColumnType("int");

                            b1.Property<DateTime>("End")
                                .HasColumnType("datetime2")
                                .HasColumnName("EndDate");

                            b1.Property<int>("Month")
                                .HasColumnType("int");

                            b1.Property<DateTime>("Start")
                                .HasColumnType("datetime2")
                                .HasColumnName("StartDate");

                            b1.Property<int>("Year")
                                .HasColumnType("int");

                            b1.HasKey("FinancialYearId");

                            b1.ToTable("FinancialYears");

                            b1.WithOwner()
                                .HasForeignKey("FinancialYearId");
                        });

                    b.Navigation("Period")
                        .IsRequired();
                });

            modelBuilder.Entity("Finance.Domain.Entities.GLAccount", b =>
                {
                    b.HasOne("Finance.Domain.Entities.GLAccount", "ParentAccount")
                        .WithMany()
                        .HasForeignKey("ParentAccountId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.OwnsOne("Finance.Domain.ValueObjects.AccountCode", "Code", b1 =>
                        {
                            b1.Property<int>("GLAccountId")
                                .HasColumnType("int");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("nvarchar(20)")
                                .HasColumnName("AccountCode");

                            b1.HasKey("GLAccountId");

                            b1.ToTable("GLAccounts");

                            b1.WithOwner()
                                .HasForeignKey("GLAccountId");
                        });

                    b.Navigation("Code")
                        .IsRequired();

                    b.Navigation("ParentAccount");
                });

            modelBuilder.Entity("Finance.Domain.Entities.GeneralExpense", b =>
                {
                    b.HasOne("Finance.Domain.Entities.CostCenter", "CostCenter")
                        .WithMany()
                        .HasForeignKey("CostCenterId");

                    b.OwnsOne("Finance.Domain.ValueObjects.Money", "Amount", b1 =>
                        {
                            b1.Property<int>("GeneralExpenseId")
                                .HasColumnType("int");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("ExpenseAmount");

                            b1.Property<string>("CurrencyCode")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("nvarchar(3)")
                                .HasColumnName("ExpenseCurrency");

                            b1.Property<decimal>("Value")
                                .HasColumnType("decimal(18,2)");

                            b1.HasKey("GeneralExpenseId");

                            b1.ToTable("GeneralExpenses");

                            b1.WithOwner()
                                .HasForeignKey("GeneralExpenseId");
                        });

                    b.Navigation("Amount")
                        .IsRequired();

                    b.Navigation("CostCenter");
                });

            modelBuilder.Entity("Finance.Domain.Entities.InventoryItemSnapshot", b =>
                {
                    b.OwnsOne("Finance.Domain.ValueObjects.Money", "AvgExpectedSalePrice", b1 =>
                        {
                            b1.Property<int>("InventoryItemSnapshotId")
                                .HasColumnType("int");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("AvgSaleAmount");

                            b1.Property<string>("CurrencyCode")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("nvarchar(3)")
                                .HasColumnName("AvgSaleCurrency");

                            b1.Property<decimal>("Value")
                                .HasColumnType("decimal(18,2)");

                            b1.HasKey("InventoryItemSnapshotId");

                            b1.ToTable("InventorySnapshots");

                            b1.WithOwner()
                                .HasForeignKey("InventoryItemSnapshotId");
                        });

                    b.OwnsOne("Finance.Domain.ValueObjects.Money", "AvgPurchaseCost", b1 =>
                        {
                            b1.Property<int>("InventoryItemSnapshotId")
                                .HasColumnType("int");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("AvgPurchaseAmount");

                            b1.Property<string>("CurrencyCode")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("nvarchar(3)")
                                .HasColumnName("AvgPurchaseCurrency");

                            b1.Property<decimal>("Value")
                                .HasColumnType("decimal(18,2)");

                            b1.HasKey("InventoryItemSnapshotId");

                            b1.ToTable("InventorySnapshots");

                            b1.WithOwner()
                                .HasForeignKey("InventoryItemSnapshotId");
                        });

                    b.OwnsOne("Finance.Domain.ValueObjects.Money", "ExpectedGrossProfit", b1 =>
                        {
                            b1.Property<int>("InventoryItemSnapshotId")
                                .HasColumnType("int");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("GrossProfitAmount");

                            b1.Property<string>("CurrencyCode")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("nvarchar(3)")
                                .HasColumnName("GrossProfitCurrency");

                            b1.Property<decimal>("Value")
                                .HasColumnType("decimal(18,2)");

                            b1.HasKey("InventoryItemSnapshotId");

                            b1.ToTable("InventorySnapshots");

                            b1.WithOwner()
                                .HasForeignKey("InventoryItemSnapshotId");
                        });

                    b.OwnsOne("Finance.Domain.ValueObjects.Money", "ExpectedLoss", b1 =>
                        {
                            b1.Property<int>("InventoryItemSnapshotId")
                                .HasColumnType("int");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("LossAmount");

                            b1.Property<string>("CurrencyCode")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("nvarchar(3)")
                                .HasColumnName("LossCurrency");

                            b1.Property<decimal>("Value")
                                .HasColumnType("decimal(18,2)");

                            b1.HasKey("InventoryItemSnapshotId");

                            b1.ToTable("InventorySnapshots");

                            b1.WithOwner()
                                .HasForeignKey("InventoryItemSnapshotId");
                        });

                    b.OwnsOne("Finance.Domain.ValueObjects.ExpiryInfo", "Expiry", b1 =>
                        {
                            b1.Property<int>("InventoryItemSnapshotId")
                                .HasColumnType("int");

                            b1.Property<DateTime?>("ExpiryDate")
                                .HasColumnType("datetime2")
                                .HasColumnName("ExpiryDate");

                            b1.Property<int>("NearExpiryThresholdDays")
                                .HasColumnType("int")
                                .HasColumnName("NearExpiryThresholdDays");

                            b1.Property<int>("WarningDays")
                                .HasColumnType("int")
                                .HasColumnName("WarningDays");

                            b1.HasKey("InventoryItemSnapshotId");

                            b1.ToTable("InventorySnapshots");

                            b1.WithOwner()
                                .HasForeignKey("InventoryItemSnapshotId");
                        });

                    b.Navigation("AvgExpectedSalePrice")
                        .IsRequired();

                    b.Navigation("AvgPurchaseCost")
                        .IsRequired();

                    b.Navigation("ExpectedGrossProfit")
                        .IsRequired();

                    b.Navigation("ExpectedLoss")
                        .IsRequired();

                    b.Navigation("Expiry");
                });

            modelBuilder.Entity("Finance.Domain.Entities.JournalEntry", b =>
                {
                    b.OwnsOne("Finance.Domain.ValueObjects.DocumentNumber", "Number", b1 =>
                        {
                            b1.Property<int>("JournalEntryId")
                                .HasColumnType("int");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("nvarchar(20)")
                                .HasColumnName("JournalNumber");

                            b1.HasKey("JournalEntryId");

                            b1.ToTable("JournalEntries");

                            b1.WithOwner()
                                .HasForeignKey("JournalEntryId");
                        });

                    b.Navigation("Number")
                        .IsRequired();
                });

            modelBuilder.Entity("Finance.Domain.Entities.JournalLine", b =>
                {
                    b.HasOne("Finance.Domain.Entities.CostCenter", "CostCenter")
                        .WithMany()
                        .HasForeignKey("CostCenterId");

                    b.HasOne("Finance.Domain.Entities.GLAccount", "GLAccount")
                        .WithMany()
                        .HasForeignKey("GLAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Finance.Domain.Entities.JournalEntry", "JournalEntry")
                        .WithMany("Lines")
                        .HasForeignKey("JournalEntryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Finance.Domain.ValueObjects.Money", "Credit", b1 =>
                        {
                            b1.Property<int>("JournalLineId")
                                .HasColumnType("int");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("CreditAmount");

                            b1.Property<string>("CurrencyCode")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("nvarchar(3)")
                                .HasColumnName("CreditCurrency");

                            b1.Property<decimal>("Value")
                                .HasColumnType("decimal(18,2)");

                            b1.HasKey("JournalLineId");

                            b1.ToTable("JournalLines");

                            b1.WithOwner()
                                .HasForeignKey("JournalLineId");
                        });

                    b.OwnsOne("Finance.Domain.ValueObjects.Money", "Debit", b1 =>
                        {
                            b1.Property<int>("JournalLineId")
                                .HasColumnType("int");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("DebitAmount");

                            b1.Property<string>("CurrencyCode")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("nvarchar(3)")
                                .HasColumnName("DebitCurrency");

                            b1.Property<decimal>("Value")
                                .HasColumnType("decimal(18,2)");

                            b1.HasKey("JournalLineId");

                            b1.ToTable("JournalLines");

                            b1.WithOwner()
                                .HasForeignKey("JournalLineId");
                        });

                    b.Navigation("CostCenter");

                    b.Navigation("Credit");

                    b.Navigation("Debit");

                    b.Navigation("GLAccount");

                    b.Navigation("JournalEntry");
                });

            modelBuilder.Entity("Finance.Domain.Entities.ProfitLossForecast", b =>
                {
                    b.OwnsOne("Finance.Domain.ValueObjects.Period", "Period", b1 =>
                        {
                            b1.Property<int>("ProfitLossForecastId")
                                .HasColumnType("int");

                            b1.Property<int>("Month")
                                .HasColumnType("int");

                            b1.Property<DateTime>("Start")
                                .HasColumnType("datetime2")
                                .HasColumnName("PeriodEndDate");

                            b1.Property<int>("Year")
                                .HasColumnType("int");

                            b1.HasKey("ProfitLossForecastId");

                            b1.ToTable("ProfitLossForecasts");

                            b1.WithOwner()
                                .HasForeignKey("ProfitLossForecastId");
                        });

                    b.OwnsOne("Finance.Domain.ValueObjects.Money", "TotalExpectedLoss", b1 =>
                        {
                            b1.Property<int>("ProfitLossForecastId")
                                .HasColumnType("int");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("TotalLossAmount");

                            b1.Property<string>("CurrencyCode")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("nvarchar(3)")
                                .HasColumnName("TotalLossCurrency");

                            b1.Property<decimal>("Value")
                                .HasColumnType("decimal(18,2)");

                            b1.HasKey("ProfitLossForecastId");

                            b1.ToTable("ProfitLossForecasts");

                            b1.WithOwner()
                                .HasForeignKey("ProfitLossForecastId");
                        });

                    b.OwnsOne("Finance.Domain.ValueObjects.Money", "TotalExpectedProfit", b1 =>
                        {
                            b1.Property<int>("ProfitLossForecastId")
                                .HasColumnType("int");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("TotalProfitAmount");

                            b1.Property<string>("CurrencyCode")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("nvarchar(3)")
                                .HasColumnName("TotalProfitCurrency");

                            b1.Property<decimal>("Value")
                                .HasColumnType("decimal(18,2)");

                            b1.HasKey("ProfitLossForecastId");

                            b1.ToTable("ProfitLossForecasts");

                            b1.WithOwner()
                                .HasForeignKey("ProfitLossForecastId");
                        });

                    b.Navigation("Period")
                        .IsRequired();

                    b.Navigation("TotalExpectedLoss")
                        .IsRequired();

                    b.Navigation("TotalExpectedProfit")
                        .IsRequired();
                });

            modelBuilder.Entity("Finance.Domain.Entities.PurchaseItem", b =>
                {
                    b.HasOne("Finance.Domain.Entities.PurchaseOrder", "PurchaseOrder")
                        .WithMany("Items")
                        .HasForeignKey("PurchaseOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Finance.Domain.ValueObjects.Money", "ExpectedSalePrice", b1 =>
                        {
                            b1.Property<int>("PurchaseItemId")
                                .HasColumnType("int");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("SalePrice");

                            b1.Property<string>("CurrencyCode")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("nvarchar(3)")
                                .HasColumnName("SaleCurrency");

                            b1.Property<decimal>("Value")
                                .HasColumnType("decimal(18,2)");

                            b1.HasKey("PurchaseItemId");

                            b1.ToTable("PurchaseItems");

                            b1.WithOwner()
                                .HasForeignKey("PurchaseItemId");
                        });

                    b.OwnsOne("Finance.Domain.ValueObjects.ExpiryInfo", "Expiry", b1 =>
                        {
                            b1.Property<int>("PurchaseItemId")
                                .HasColumnType("int");

                            b1.Property<DateTime?>("ExpiryDate")
                                .HasColumnType("datetime2")
                                .HasColumnName("ExpiryDate");

                            b1.Property<int>("NearExpiryThresholdDays")
                                .HasColumnType("int")
                                .HasColumnName("NearExpiryThresholdDays");

                            b1.Property<int>("WarningDays")
                                .HasColumnType("int")
                                .HasColumnName("WarningDays");

                            b1.HasKey("PurchaseItemId");

                            b1.ToTable("PurchaseItems");

                            b1.WithOwner()
                                .HasForeignKey("PurchaseItemId");
                        });

                    b.OwnsOne("Finance.Domain.ValueObjects.Money", "UnitPrice", b1 =>
                        {
                            b1.Property<int>("PurchaseItemId")
                                .HasColumnType("int");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("UnitPrice");

                            b1.Property<string>("CurrencyCode")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("nvarchar(3)")
                                .HasColumnName("PriceCurrency");

                            b1.Property<decimal>("Value")
                                .HasColumnType("decimal(18,2)");

                            b1.HasKey("PurchaseItemId");

                            b1.ToTable("PurchaseItems");

                            b1.WithOwner()
                                .HasForeignKey("PurchaseItemId");
                        });

                    b.Navigation("ExpectedSalePrice");

                    b.Navigation("Expiry");

                    b.Navigation("PurchaseOrder");

                    b.Navigation("UnitPrice")
                        .IsRequired();
                });

            modelBuilder.Entity("Finance.Domain.Entities.PurchaseOrder", b =>
                {
                    b.OwnsOne("Finance.Domain.ValueObjects.DocumentNumber", "Number", b1 =>
                        {
                            b1.Property<int>("PurchaseOrderId")
                                .HasColumnType("int");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("nvarchar(20)")
                                .HasColumnName("OrderNumber");

                            b1.HasKey("PurchaseOrderId");

                            b1.ToTable("PurchaseOrders");

                            b1.WithOwner()
                                .HasForeignKey("PurchaseOrderId");
                        });

                    b.OwnsOne("Finance.Domain.ValueObjects.Money", "Total", b1 =>
                        {
                            b1.Property<int>("PurchaseOrderId")
                                .HasColumnType("int");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("TotalAmount");

                            b1.Property<string>("CurrencyCode")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("nvarchar(3)")
                                .HasColumnName("TotalCurrency");

                            b1.Property<decimal>("Value")
                                .HasColumnType("decimal(18,2)");

                            b1.HasKey("PurchaseOrderId");

                            b1.ToTable("PurchaseOrders");

                            b1.WithOwner()
                                .HasForeignKey("PurchaseOrderId");
                        });

                    b.Navigation("Number")
                        .IsRequired();

                    b.Navigation("Total")
                        .IsRequired();
                });

            modelBuilder.Entity("Finance.Domain.Entities.JournalEntry", b =>
                {
                    b.Navigation("Lines");
                });

            modelBuilder.Entity("Finance.Domain.Entities.PurchaseOrder", b =>
                {
                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
